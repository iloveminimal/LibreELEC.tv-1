#!/bin/bash

################################################################################
#      This file is part of LibreELEC - https://libreelec.tv
#      Copyright (C) 2017-present Team LibreELEC
#
#  LibreELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  LibreELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with LibreELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. config/options $1

_get_file_already_downloaded() {
  if [ -f $PACKAGE ]; then
    if [ "$(cat $STAMP_URL 2>/dev/null)" == "${CMD_URL}" ]; then
      [ -z "${PKG_SHA256}" -o "$(cat $STAMP_SHA 2>/dev/null)" == "${PKG_SHA256}" ] && return 0
    fi
  fi
  return 1
}

if [ -z "$1" ]; then
  for i in `find packages/ -type f -name package.mk`; do
    GET_PKG=`grep ^PKG_NAME= $i | sed -e "s,\",,g" -e "s,PKG_NAME=,,"`
    $SCRIPTS/get $GET_PKG
  done
fi

if [ -n "$PKG_URL" -o -n "$PKG_SOURCE_NAME" -o -n "$PKG_GIT_URL" -o -n "$PKG_SVN_URL" -o -n "$PKG_HG_URL" ]; then

  mkdir -p $SOURCES/$1
  
  SOURCE_NAME="$PKG_NAME-$PKG_VERSION.tar.xz"
  PATCH_TMP="$SOURCES/$1/$1-$PKG_VERSION"
  GET_OPT=""

  if [ -n "$PKG_URL" -o -n "$PKG_SOURCE_NAME" ]; then

    PACKAGE="$SOURCES/$1/$PKG_SOURCE_NAME"
    CMD_URL=$PKG_URL
    PACKAGE_MIRROR="$DISTRO_MIRROR/$PKG_NAME/$PKG_SOURCE_NAME"
    
    [ "$VERBOSE" != "yes" ] && GET_OPT=-q
    
    GET_CMD="wget --timeout=30 --tries=3 --passive-ftp --no-check-certificate -c $GET_OPT -O $PACKAGE $CMD_URL"
    
  elif [ -n "$PKG_GIT_URL" ]; then
  
    
    PACKAGE="$SOURCES/$1/$SOURCE_NAME"
    CMD_URL=$PKG_GIT_URL
    CHECKOUT_PATCH="$SOURCES/$1/$1-$PKG_GIT_BRANCH.git"

    [ "$VERBOSE" = "yes" ] && GET_OPT=-v

    if [ "$PKG_KEEP_CHECKOUT" = "yes" -a -d $CHECKOUT_PATCH ]; then
      GET_CMD="git fetch $GET_OPT origin $PKG_GIT_BRANCH:$PKG_GIT_BRANCH"
    else
      GET_CMD="git clone $GET_OPT --bare -b $PKG_GIT_BRANCH $CMD_URL $CHECKOUT_PATCH"
    fi
    
  elif [ -n "$PKG_SVN_URL" ]; then
  
    PACKAGE="$SOURCES/$1/$SOURCE_NAME"
    CMD_URL=$PKG_SVN_URL
    CHECKOUT_PATCH="$SOURCES/$1/$1.svn"
   
    [ "$VERBOSE" != "yes" ] && GET_OPT=-q

    if [ "$PKG_KEEP_CHECKOUT" = "yes" -a -d $CHECKOUT_PATCH ]; then
      GET_CMD="svn update $GET_OPT -r $PKG_VERSION"
    else
      GET_CMD="svn checkout $GET_OPT -r $PKG_VERSION $CMD_URL $CHECKOUT_PATCH"
    fi
  elif [ -n "$PKG_HG_URL" ]; then

    PACKAGE="$SOURCES/$1/$SOURCE_NAME"
    CMD_URL=$PKG_HG_URL
    CHECKOUT_PATCH="$SOURCES/$1/$1-$PKG_HG_BRANCH.hg"

    [ "$VERBOSE" != "yes" ] && GET_OPT=-v

    if [ "$PKG_KEEP_CHECKOUT" = "yes" -a -d $CHECKOUT_PATCH ]; then
      GET_CMD="hg pull $GET_OPT -r $PKG_VERSION"
    else
      GET_CMD="hg clone $GET_OPT -r $PKG_VERSION -b $PKG_HG_BRANCH $CMD_URL $CHECKOUT_PATCH"
    fi
  fi
  
  STAMP_URL="$PACKAGE.url"
  STAMP_SHA="$PACKAGE.sha256"
    
  # Latest file already present, exit now...
  _get_file_already_downloaded $1 && exit 0

  # Avoid concurrent downloads of the same package
  _isblocked=N
  exec 99<$SOURCES/$1
  while ! flock --nonblock --exclusive 99; do
    [ ${_isblocked} == N ] && { echo "Project/Device ${DEVICE:-${PROJECT}} waiting, to avoid concurrent download of ${1}..."; _isblocked=Y; }
    sleep 1
  done

  # Check again in case of concurrent access - if nothing needs to be downloaded, exit now...
  _get_file_already_downloaded $1 && exit 0
    
  # At this point, we need to download something...
  printf "%${BUILD_INDENT}c ${boldcyan}GET${endcolor}      $1\n" ' '>&$SILENT_OUT
  export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

  # unset LD_LIBRARY_PATH to stop wget from using toolchain/lib and loading libssl.so/libcrypto.so instead of host libraries
  unset LD_LIBRARY_PATH

  rm -f $STAMP_URL $STAMP_SHA

  NBGET=10
  while [ $NBGET -gt 0 ]; do
    rm -f $PACKAGE

    if $GET_CMD; then
    
        if [ -n "$PKG_GIT_URL" -o -n "$PKG_SVN_URL" -o -n "$PKG_HG_URL" ]; then
            cp -R $CHECKOUT_PATCH $PATCH_TMP
            rm -rf $PATCH_TMP/.git
            rm -f $PATCH_TMP/.gitignore
            rm -f $PATCH_TMP/.gitmodules
            rm -rf $PATCH_TMP/debian
            rm -rf $PATCH_TMP/.svn
            rm -rf $PATCH_TMP/.hg
            tar cvJf $PACKAGE $PATCH_TMP
            rm -rf $PATCH_TMP
        fi
    
        CALC_SHA256="$(sha256sum $PACKAGE | cut -d" " -f1)"

        [ -z "${PKG_SHA256}" -o "${PKG_SHA256}" == "${CALC_SHA256}" ] && break

        printf "${boldred}WARNING${endcolor} Incorrect checksum calculated on downloaded file: got ${CALC_SHA256}, wanted ${PKG_SHA256}\n\n"
    fi
    NBGET=$((NBGET - 1))
  done

  if [ $NBGET -eq 0 ]; then
    echo -e "\nCant't get $1 sources : $CMD_URL\n Try later !!"
    exit 1
  else
    printf "${boldgreen}INFO${endcolor} Calculated checksum is: ${CALC_SHA256}\n\n"
    echo "${CMD_URL}" > $STAMP_URL
    echo "${CALC_SHA256}" > $STAMP_SHA
  fi
  
  if [ ! "$PKG_KEEP_CHECKOUT" = "yes" ]; then
      rm -rf $CHECKOUT_PATCH
  fi

  exit 0
fi
